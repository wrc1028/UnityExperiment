#pragma kernel SDF
#pragma kernel SDFRegion
#pragma kernel SDFMultiGray

#define SIZEX 32
#define SIZEY 32
#define MAXDST 30
#define MAXDST2 100000000

int2 _PixelID;
Texture2D<float> _OriginTexture;
RWStructuredBuffer<float> DstResult;
RWTexture2D<float> Result;

[numthreads(SIZEX, SIZEY, 1)]
void SDF (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _OriginTexture.GetDimensions(width, height);
    // 先求外部的距离场
    float result = 0;
    if (_OriginTexture[id.xy] > 0.9)
    {
        float dst = distance(_PixelID, id.xy);
        float normalizeDst = dst >= MAXDST ? 1 : dst / MAXDST;
        result = normalizeDst;
    }
    else result = 1;
    int index = id.x + id.y * height;
    DstResult[index] = result;
}
// 在指定边长的包围盒内进行最短距离遍历
float CalculateDstInBox(int2 pixelID, int boxSize, int resolution)
{
    float minDst = 1;
    float currentPixelValue = _OriginTexture[pixelID];
    float offset = 1.0 / MAXDST;
    for (int x = -boxSize; x <= boxSize; x++)
    {
        for (int y = -boxSize; y <= boxSize; y++)
        {
            int xIndex = pixelID.x + x;
            int yIndex = pixelID.y + y;
            bool indexOutOfRange = xIndex < 0 || xIndex > resolution - 1 || yIndex < 0 || yIndex > resolution - 1;
            if (indexOutOfRange || _OriginTexture[int2(xIndex, yIndex)] == currentPixelValue) continue;
            float dst = distance(pixelID, int2(xIndex, yIndex));
            float normalizeDst = dst >= boxSize ? 1 : dst / boxSize;
            minDst = min(normalizeDst, minDst);
        }
    }
    float result = currentPixelValue > 0.5 ?  currentPixelValue + minDst - offset / MAXDST : 1 - minDst + offset;
    return result * 0.5;
}
// 指定顶点外扩, 遍历最短距离值
// offset(1, 0)为X轴遍历 (0, 1)为Y轴遍历
uint CalculateMinDst(int2 srcPos, int2 dstPos, int2 pixelID, int2 offset, int resolution)
{
    // 整条边界都超出边界
    if (dot(srcPos, 1 - offset) < 0 || dot(srcPos, 1 - offset) > resolution - 1) return MAXDST2;
    int2 src = srcPos + offset;
    int dst = dot(dstPos, offset);
    uint minDst = MAXDST2;
    while (dot(src, offset) < dst)
    {
        if (_OriginTexture[src] != _OriginTexture[pixelID] && dot(src, offset) >= 0 && dot(src, offset) < resolution)
            minDst = min(minDst, dot(src - pixelID, src - pixelID));
        src += offset;
    }
    return minDst;
}

float ExpandCalculate(int2 pixelID, uint maxSize, int resolution)
{
    int2 offset = int2(1, -1);
    uint expand = 1;
    uint extraExpand = MAXDST2;
    uint minDst2 = MAXDST2;

    while(extraExpand > 0)
    {
        int2 lu = pixelID + offset.yx * expand;
        int2 ru = pixelID + offset.xx * expand;
        int2 ld = pixelID + offset.yy * expand;
        int2 rd = pixelID + offset.xy * expand;
        uint up = CalculateMinDst(lu, ru, pixelID, int2(1, 0), resolution);
        uint down = CalculateMinDst(ld, rd, pixelID, int2(1, 0), resolution);
        uint left = CalculateMinDst(ld, lu, pixelID, int2(0, 1), resolution);
        uint right = CalculateMinDst(rd, ru, pixelID, int2(0, 1), resolution);
        minDst2 = min(minDst2, min(min(up, down), min(left, right)));
        extraExpand = ceil(sqrt(minDst2)) - expand;
        expand ++;
    }
    float result = sqrt(minDst2) / (resolution * 0.2);
    return result;
}

[numthreads(SIZEX, SIZEY, 1)]
void SDFRegion (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _OriginTexture.GetDimensions(width, height);
    // 在指定的方盒内进行遍历，超出方盒边长的距离视为最大值
    // Result[id.xy] = CalculateDstInBox(id.xy, width * 2, width);
    // 从一个点向四周辐射，逐渐扩大包围盒，直到ceil(最短距离)与扩展边长相等
    Result[id.xy] = ExpandCalculate(id.xy, width * 2, width);
}

// 多段灰阶求平滑过度
[numthreads(SIZEX, SIZEY, 1)]
void SDFMultiGray (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _OriginTexture.GetDimensions(width, height);
    // float4(dstMinValue, minDst, dstMaxValue, minDst)
    
}